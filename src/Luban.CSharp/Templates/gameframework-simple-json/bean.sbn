using Luban;
using SimpleJSON;
{{
    parent_def_type = __bean.parent_def_type
    export_fields = __bean.export_fields
    hierarchy_export_fields = __bean.hierarchy_export_fields
}}

{{namespace_with_grace_begin __namespace_with_top_module}}
{{~if __bean.comment != '' ~}}
/// <summary>
/// {{escape_comment __bean.comment}}
/// </summary>
{{~end~}}
{{~
func get_ref_name 
    ret (format_property_name __code_style $0.name) + '_Ref'
end

func get_index_var_name
    ret (format_property_name __code_style $0.name) + '_Index'
end
~}}
{{~if __bean.is_value_type~}}
public partial struct {{__name}}
{{~else~}}
public {{class_modifier __bean}} partial class {{__name}} : {{if parent_def_type}}{{__bean.parent}}{{else}}GameFramework.DataTable.IDataRow{{end}}
{{~end~}}
{
{{~ for field in export_fields ~}}
{{~if field.comment != '' ~}}
    /// <summary>
    /// {{escape_comment field.comment}}
    /// </summary>
{{~end~}}
public {{declaring_type_name field.ctype}} {{format_property_name __code_style field.name}} { get; private set; }
{{~if can_generate_ref field~}}
public {{declaring_type_name (get_ref_type field)}} {{get_ref_name field}};
{{~else if can_generate_collection_ref field~}}
public {{declaring_collection_ref_name field.ctype}} {{get_ref_name field}};
{{~end~}}
{{~if has_index field
indexMapType = get_index_map_type field
~}}
public readonly {{declaring_type_name indexMapType}} {{get_index_var_name field}} = new {{declaring_type_name indexMapType}}();
{{~end~}}
{{~end~}}

{{~if !__bean.is_abstract_type && !__bean.is_value_type~}}
public const int __ID__ = {{__bean.id}};
{{~end~}}
{{if !parent_def_type && !__bean.is_value_type}}
int GameFramework.DataTable.IDataRow.Id => Id;
{{~end~}}

    public {{method_modifier __bean}} bool ParseDataRow(string dataRowString, object userData)
    {
    {{if parent_def_type}}
        if (!base.ParseDataRow(dataRowString, userData)) return false;
    {{end}}
        var __node = userData as JSONNode;
    {{~ for field in export_fields
        fieldName = format_property_name __code_style field.name
        ~}}
        {{deserialize_field fieldName '__node' field.name field.ctype}}
        {{~if can_generate_ref field~}}
        {{get_ref_name field}} = null;
        {{~end~}}
        {{~if has_index field~}}
        foreach(var _v in {{fieldName}})
        { 
            {{get_index_var_name field}}.Add(_v.{{format_property_name __code_style (get_index_field field).name}}, _v);
        }
        {{~end~}}
    {{~end~}}
        return true;
    }

    {{~if !parent_def_type && !__bean.is_value_type~}}
    public bool ParseDataRow(byte[] dataRowBytes, int startIndex, int length, object userData)
    {
        return ParseDataRow(System.Text.Encoding.UTF8.GetString(dataRowBytes, startIndex, length), userData);
    }
    {{~end~}}


    public static {{__name}} Deserialize{{__name}}(JSONNode _buf)
    {
    {{~if __bean.is_value_type~}}
        var inst = new {{__name}}();
        if (!inst.ParseDataRow(null, _buf)) throw new SerializationException();
        return inst;
    {{~else~}}
    {{~if __bean.is_abstract_type~}}
        switch ((string)_buf["$type"])
        {
        {{~for child in __bean.hierarchy_not_abstract_children~}}
            case "{{impl_data_type child __bean}}": return DeserializeImpl<{{child.full_name}}>();
        {{~end~}}
            default: throw new SerializationException();
        }
    {{~else~}}
        return DeserializeImpl<{{__bean.full_name}}>();
    {{~end~}}

        T DeserializeImpl<T>() where T : GameFramework.DataTable.IDataRow, new()
        {
            var inst = new T();
            if (!inst.ParseDataRow(null, _buf)) throw new SerializationException();
            return inst;
        }
    {{~end~}}
    }

    public override string ToString()
    {
        return "{{full_name}}{ "
    {{~for field in hierarchy_export_fields ~}}
        + "{{format_field_name __code_style field.name}}:" + {{to_pretty_string (format_property_name __code_style field.name) field.ctype}} + ","
    {{~end~}}
        + "}";
    }
}
{{namespace_with_grace_end __namespace_with_top_module}}
