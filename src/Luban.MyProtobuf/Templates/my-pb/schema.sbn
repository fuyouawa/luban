syntax = "{{__syntax}}";

package {{__top_module_with_namespace}};

{{~ get_imports __import_infos ~}}

{{~for enum in __enums ~}}
{{~if enum.comment != '' ~}}
// {{escape_comment enum.comment}}
{{~end~}}
enum {{enum.name}} {
    {{~if !enum.has_zero_value_item ~}}
    {{enum.name}}_NONE = 0;
    {{~end~}}
    {{~for item in enum.items ~}}
{{~if item.comment_or_alias != '' ~}}
    // {{escape_comment item.comment_or_alias}}
{{~end~}}
    {{enum.name}}_{{item.name}} = {{item.int_value}};
    {{~end~}}
}

{{~end~}}

{{~for bean in __beans~}}
{{~if bean.comment != '' ~}}
// {{escape_comment bean.comment}}
{{~end~}}
message {{bean.name}} {
{{~if bean.is_abstract_type ~}}
    oneof value {
        {{~for c in bean.hierarchy_not_abstract_children~}}
        {{full_name c}} {{c.name}} = {{c.auto_id}};
        {{~end~}}
    }
{{~else~}}
    {{~for f in bean.hierarchy_export_fields ~}}
    {{~if f.comment != '' ~}}
    // {{escape_comment f.comment}}
    {{~end~}}
    {{pre_decorator f.ctype}} {{declaring_type_name f.ctype}} {{f.name}} = {{f.auto_id}} {{suffix_options f.ctype}};
    {{~end~}}
{{~end~}}
}

{{~end~}}

{{~for table in __tables~}}
{{~if table.comment != '' ~}}
// {{escape_comment table.comment}}
{{~end~}}
message {{table.name}} {
    repeated {{declaring_type_name table.value_ttype}} data_list = 1 [packed = false];
}

{{~end~}}
